* 상속

부모 > 자식 : 자식 클래스는 부모 클래스에 포함된다. 
부모의 멤버, 함수 < 자식의 멤버, 함수 : 부모의 멤버, 함수는 자식의 멤버, 함수에 포함된다.
- 직관적으로 이해 해야 함

* 접근 제어
 
public    : 외부접근o 자식클래스o
protected : 외부접근x 자식클래스o 
private   : 외부접근x 자식클래스x

* 상속이 필요한 이유 1, 2
-
- // 상속이 필요한 이유
// 동적할당을 해 놓고 메서드를 하나로 간편하게 할 수 있다.
// 밑의 예시를 보자면 출력 할 때 간단하게 만들 수 있다.
* 오버라이딩과 정적바인딩
// 정적바인딩
// 상속에서 부모를 가르키는 포인터는 부모를 가르킬 수 있지만, 자식을 가르켜도 상관없다.
// 기본적으로 C++ 정적 바인딩이 일어난다
// b->Print(); 이걸 보고 부모를 가르키는지 자식을 가르키는지 애매모호할 수 있다
// 이때는 그냥 식 그대로 b의 print()를 가르킨다는 것이 정적 바인딩
// 바인딩은 찾는 것을 뜻한다.

* 가상함수와 동적바인딩
// virtual 프로그램을 만드는 시점에는 알 수 없으니, 프로그램이 실행되는 시점에서 결정하게끔 한다.
// 가상함수인 virtual 을 사용함으로써 동적 바인딩이 가능하다.
