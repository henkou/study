new와 delete를 사용하기 전에 memory에 대해서 알아보자.

RAM 위로 올라오는 프로그램의 내용을 크게 나누어서 코드 세그먼트(Code Segment) 와 데이터 세그먼트(Data Segment) 로 분류할 수 있습니다.
- 여기서 볼 부분은 데이터 세그먼트이다.

일단 가장 먼저 주목할 부분은 읽기 전용(Read-Only) Data 부분 입니다.
이전에 상수와 리터럴에 대해서 이야기 할 때 등장하였는데 이 부분에 저장되는 데이터들은 값이 절대로 변경될 수 없습니다. 
다시 말해 궁극적으로 보호 받는 부분 입니다.
그 다음으로 그 위에 전역 변수와 정적 변수가 거처하는 데이터 영역이 있습니다. 
그 위에 바로 힙(Heap) 이라는 영역 프로그래머가 관리하는 메모리 영역 - 프로그래머의 필요에 의해서 메모리 공간이 할당 및 소멸되는 영역
힙 맨 위를 보면 스택(Stack) 이 있습니다. 스택은 지역 변수가 거처하는 곳입니다. 
스택의 특징으로는 지역 변수가 늘어나면 크기가 아래로 증가하다가 지역변수가 파괴되면 다시 스택의 크기는 위로 줄어들게 됩니다. 
즉, 스택이 늘어나는 방향은 메모리 주소가 낮아지는 방향(아래 방향) 이라 보시면 됩니다.

순서.
1. 스택(stack) 지역 변수가 위치 특징, 지역 변수가 늘어나면 크기가 아래로 증가함.
2. 힙(heap)  특징 : malloc 과 free 함수를 사용해서 메모리 관리를 할 수 있음
3. 데이터 영역 전역, 정적 변수
4. 읽기 전용(Read-Only) 상수 리터럴, 특징 : 읽기 전용이다. 건드릴 수 없다.
5. 코드영역

C에서는 malloc, free를 통해 메모리를 할당하고 제거할 수 있다. C++에서도 가능한데
언어적인 차원에서 지원하는 new, delete를 통해 메모리를 할당하고 제거할 수 있다. 여기서 메모리 관리는 Heap 부분에 관한 것이다.

* delete로 제거 할 수 있는 메모리는 new로 생성되어야만 가능하다. 즉 new 생성된 메모리는 delete 해줘야 한다.
--> 기본 타입 뿐만 아니라 배열로도 생성가능.
* Type* pointer = new Type;
* Type* pointer = new Type[size]; 

* malloc 와 new 의 차이점
모두 동적으로 할당을 하지만 new의 경우 객체를 동적으로 생성하면서와 동시에 자동으로 생성자도 호출해준다.

* 포인터 배열은 -> 이 표시를 사용한다.
