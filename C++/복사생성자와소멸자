* 소멸자 - 자동 생성되는 생성자처럼 자동으로 데이터 메모리를 지워주는 함수(객체가 동적으로 할당받은 메모리를 해제하는 일).
~(소멸자의 이름), ex) ~Marine();
객체의 다른 부분에 영향을 끼치지 않도록 하기 위해 소멸자의 역할도 중요하다.
그 외에도 쓰레드 사이에서 lock 된 것을 푸는 역할이라던지 등의 역할을 수행하게 된다.
참고로 우리가 따로 생성자를 정의하지 않더라도 디폴트 생성자가 있었던 것 처럼, 소멸자도 디폴트 소멸자(Default Destructor)가 있다. 
물론, 디폴트 소멸자 내부에선 아무런 작업도 수행하지 않는다. 만일 소멸자가 필요 없는 클래스라면 굳이 소멸자를 따로 써줄 필요는 없다.

* 복사 생성자
**주의 사항 : 인자로 받는 변수의 내용을 함수 내부에서 바꾸지 않는다면 앞에 const 를 붙여 주는 것이 바람직하다.
**주의 사항 : 복사 생성자는 항상 '생성' 할 때에 호출된다.
1. Photon_Cannon pc3 = pc2

2. Photon_Cannon pc3;
pc3 = pc2;              의 2개의 문장은 서로 다른 의미를 나타낸다. 

첫번째 문장은 복사를 한다는 의미이고, 두번째 문장은 pc3을 호출해서 pc3 = pc2;라는 문장을 실행하는 것이다.
* 디폴트 복사 생성자의 한계 - 한계는 소멸자에서 나타난다. 먼저 호출된 것이 소멸하게 되면 복사된 것들은 주소가 없어지기 때문에 오류(런타임) 발생.
* 깊은 복사, 얕은 복사 - 이 개념이 나오는 이유는 디폴트 복사 생성자의 한계를 해결하기 위해 깊은 복사가 나왔고, 단순히 복사한다는 개념은 얕은 복사이다.


* 복사 대입 연산자는 이미 생성된 객체에 다른 객체의 값을 대입시킬 때 호출되는 것
* 복사 생성자는 말 그대로 생성자이기 때문에 객체가 생성되는 시점에 대입되는 인자가 존재하면, 기본 생성자 대신에 호출된다.
- 복사 대입 연산자는 복사 생성자와 마찬가지로 직접 정의하지 않으면 컴파일러가 자동으로 생성해주는 함수입니다.
