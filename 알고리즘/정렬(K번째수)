첫 번째 - 원하는 식으로 구현 못했음
import java.util.*;
class Solution {
    public int[] solution(int[] array, int[][] commands) {
        int[] answer = {};
        int[] update = {};
        // commands에서 배열array의 시작부분과 끝나는 부분을 읽어서 새로운 배열을 만든다음에 오름차순으로 정렬을 한다
        // 그리고 commands 배열에서 몇 번째 부분을 출력하는지를 읽어와서 answer 배열에 넣어준다.
        // 배열 부분을 새롭게 뽑아서 정렬하는 함수가 있는지 아니면 새롭게 만든 배열에다가 저장을 해줘야 하는지
        // commands[i][j]에서 i부분 만큼 반복해서 돌아야 answer배열에 숫자가 들어가는데 while 인지 for 문을 써야 되는지 어디인지 아직 이해 못함. 혹은 다른 방법이 있는지 
        for(int i = 0; i < commands[][].length; i++){
            int insert = commands[i][]
            update = array[]
                update = array[i];
        }
        // 오름차순 정렬
        Arrays.sort(update);
        // a 는 몇번째를 가지고 오는지를 담는 변수
        int a = commands[][2];
        answer = update[a];
        return answer;
    }
}


두번째 - 시간초과
import java.util.*;
class Solution {
    public int[] solution(int[] array, int[][] commands) {
        int[] answer = {};
        int[] arr = new int [commands.length];
        // 여기 for 에서 시간이 초과 되는 것 같다. 줄일 수 있는 방법은?
        for(int i = 0; i < commands.length; i++){
            int c = commands[i][0];
            int b = commands[i][1];
            int a = b - c;
            // 여기서 for문을 한 이유는?
            // arr에 array 배열을 집어 넣기 위해서 근데 왜 밑에꺼랑 시간ㅇㅣ 다르게 나오지?
            for(int j = 0; j <= a; i++){
                arr[j] = array[c + j];
            }
            
            Arrays.sort(arr);
            int d = commands[i][2];
            answer[i] = arr[d];
        }
        return answer;
    }
}

세번째 - 참고해서 품
import java.util.*;
class Solution {
    public int[] solution(int[] array, int[][] commands) {
        int[] answer = new int[commands.length];
        for(int i = 0; i < commands.length; i++){
            int start = commands[i][0];
            int end = commands[i][1];
            int length = end - start;
            int a = 0;
            int arr[] = new int[length + 1]; 
            for(int j = start - 1; j < end; j++){ // -1 해주는 이유는 배열은 0부터 시작이니까
                arr[a++] = array[j];
            }
            Arrays.sort(arr);
            int d = commands[i][2];
            answer[i] = arr[d-1]; // d도 마찬가지로 배열은 0부터 시작 
        }
        return answer;
    }
}

다른사람풀이, 몰랐던 것 
copyOfRange 

Arrays.copyOfRange(arrays, commands[i][0]-1, commands[i][1];
                             start                end
